install.packages(PLNmodels)
install.packages("PLNmodels")
library(PLNmodels)
data("trichoptera")
trichoptera <- prepare_data(trichoptera$Abundance, trichoptera$Covariate)
str(trichoptera)
trichoptera
View(trichoptera)
corrplot::corrplot(
t(log(1 + trichoptera$Abundance)),
is.corr = FALSE,
addgrid.col = NA
)
data("trichoptera")
trichoptera$Abundance
trichoptera$Covariate
network_models <- PLNnetwork(Abundance ~ 1 + offset(log(Offset)), data = trichoptera)
trichoptera <- prepare_data(trichoptera$Abundance, trichoptera$Covariate)
network_models <- PLNnetwork(Abundance ~ 1 + offset(log(Offset)), data = trichoptera)
network_models
network_models$criteria %>% head() %>% knitr::kable()
network_models$convergence %>% head() %>% knitr::kable()
plot(network_models, "diagnostic")
plot(network_models)
coefficient_path(network_models, corr = TRUE) %>%
ggplot(aes(x = Penalty, y = Coeff, group = Edge, colour = Edge)) +
geom_line(show.legend = FALSE) +  coord_trans(x="log10") + theme_bw()
library(ggplot)
library(ggplot2)
coefficient_path(network_models, corr = TRUE) %>%
ggplot(aes(x = Penalty, y = Coeff, group = Edge, colour = Edge)) +
geom_line(show.legend = FALSE) +  coord_trans(x="log10") + theme_bw()
model_pen <- getModel(network_models, network_models$penalties[20]) # give some sparsity
model_BIC <- getBestModel(network_models, "BIC")   # if no criteria is specified, the best BIC is used
library(future)
plan(multisession, workers = 2)
n <- nrow(trichoptera)
subs <- replicate(10, sample.int(n, size = n/2), simplify = FALSE)
stability_selection(network_models, subsamples = subs)
model_StARS <- getBestModel(network_models, "StARS")
plot(network_models, "stability")
future::plan("sequential")
model_StARS
my_graph <- plot(model_StARS, plot = FALSE)
my_graph
plot(model_StARS)
plot(model_StARS, type = "support", output = "corrplot")
?prepare_data
knitr::opts_chunk$set(echo = TRUE)
data("trichoptera")
trichoptera <- prepare_data(trichoptera$Abundance, trichoptera$Covariate)
str(trichoptera)
View(trichoptera)
corrplot::corrplot(
t(log(1 + trichoptera$Abundance)),
is.corr = FALSE,
addgrid.col = NA
)
network_models <- PLNnetwork(Abundance ~ 1 + offset(log(Offset)), data = trichoptera)
network_models
network_models$criteria %>% head() %>% knitr::kable()
network_models$convergence %>% head() %>% knitr::kable()
plot(network_models, "diagnostic")
plot(network_models)
coefficient_path(network_models, corr = TRUE) %>%
ggplot(aes(x = Penalty, y = Coeff, group = Edge, colour = Edge)) +
geom_line(show.legend = FALSE) +  coord_trans(x="log10") + theme_bw()
model_pen <- getModel(network_models, network_models$penalties[20]) # give some sparsity
model_BIC <- getBestModel(network_models, "BIC")   # if no criteria is specified, the best BIC is used
library(future)
plan(multisession, workers = 2)
n <- nrow(trichoptera)
subs <- replicate(10, sample.int(n, size = n/2), simplify = FALSE)
stability_selection(network_models, subsamples = subs)
model_StARS <- getBestModel(network_models, "StARS")
plot(network_models, "stability")
future::plan("sequential")
model_StARS
my_graph <- plot(model_StARS, plot = FALSE)
my_graph
plot(model_StARS)
data("trichoptera")
library(readr)
library(PLNmodels)
library(ggplot2)
library(readr)
reads_test <- read_csv("reads_test.csv")
View(reads_test)
View(trichoptera)
View(trichoptera)
View(trichoptera$Abundance)
library(tidyverse)
reads_test <- reads_test %>%
column_to_rownames(index)
reads_test <- reads_test %>%
column_to_rownames("index")
reads_test <- reads_test %>%
column_to_rownames("index")
reads_test <- read_csv("reads_test.csv")
reads_test <- reads_test %>%
reads_test <- read_csv("reads_test.csv")
reads_test <- reads_test %>%
column_to_rownames("index")
metadata_test <- read_csv("metadata_test.csv")
View(metadata_test)
reads_test <- read_csv("reads_test.csv")
metadata_test <- read_csv("metadata_test.csv")
joined_data <- full_join(reads_test, metadata_test)
?full_join
joined_data <- full_join(reads_test, metadata_test, by = c("index","id"))
reads_test <- read_csv("reads_test.csv") %>%
mutate(index=id)
reads_test <- read_csv("reads_test.csv") %>%
rename(index=id)
rename(reads_test, index=id)
reads_test$index
reads_test <- read_csv("reads_test.csv")
reads_test <- read_csv("reads_test.csv") %>%
rename(index = `id`)
reads_test <- read_csv("reads_test.csv") %>%
rename(`index` = `id`)
library(readr)
reads_test <- read_csv("reads_test.csv") %>%
rename("index" = "id")
reads_test <- read_csv("reads_test.csv") %>%
rename(id = index)
joined_data <- full_join(reads_test, metadata_test)
View(joined_data)
joined_data <- left_join(reads_test, metadata_test)
metadata_test_ordered <- joined_data %>%
select(id,biome:shannon_entropy)
View(metadata_test_ordered)
reads_test_ordered <- joined_data %>%
select(-biome:shannon_entropy)
View(joined_data)
View(reads_test_ordered)
joined_data <- inner_join(reads_test, metadata_test)
metadata_test_ordered <- joined_data %>%
select(id,biome:shannon_entropy)
reads_test_ordered <- joined_data %>%
select(-biome:shannon_entropy)
microbiome <- prepare_data(reads_test_ordered,metadata_test_ordered)
microbiome
View(microbiome)
?prepare_data
microbiome <- prepare_data(reads_test_ordered,metadata_test_ordered, offset = "GMPR")
data("microbiome")
str(microbiome)
View(microbiome)
metadata_test_ordered <- joined_data %>%
select(id,biome:shannon_entropy)
reads_test_ordered <- joined_data %>%
select(-id, -biome:shannon_entropy)
microbiome <- prepare_data(reads_test_ordered,metadata_test_ordered, offset = "GMPR")
str(microbiome)
View(microbiome)
corrplot::corrplot(
t(log(1 + reads_test_ordered)),
is.corr = FALSE,
addgrid.col = NA
)
reads_test_ordered <- joined_data %>%
select(-id, -biome:shannon_entropy)
reads_test_ordered <- joined_data %>%
select(-biome:id)
reads_test_ordered <- joined_data %>%
select(-id)
reads_test_ordered <- joined_data %>%
select(-id) %>%
select(-biome)
reads_test_ordered <- joined_data %>%
select(-id) %>%
select(!biome:shannon_entropy)
microbiome <- prepare_data(reads_test_ordered,metadata_test_ordered, offset = "GMPR")
str(microbiome)
View(microbiome)
corrplot::corrplot(
t(log(1 + reads_test_ordered)),
is.corr = FALSE,
addgrid.col = NA
)
corrplot::corrplot(
t(log(1 + reads_test_ordered)),
is.corr = FALSE,
addgrid.col = NA
)
plot.new()
corrplot::corrplot(
t(log(1 + reads_test_ordered)),
is.corr = FALSE,
addgrid.col = NA
)
corrplot::corrplot(
t(log(1 + reads_test_ordered)),
is.corr = FALSE,
addgrid.col = NA
)
network_models <- PLNnetwork(Abundance ~ 1 + offset(log(Offset)), data = microbiome)
network_models
network_models$criteria %>% head() %>% knitr::kable()
network_models$convergence %>% head() %>% knitr::kable()
plot(network_models, "diagnostic")
plot(network_models, "diagnostic")
plot(network_models)
coefficient_path(network_models, corr = TRUE) %>%
ggplot(aes(x = Penalty, y = Coeff, group = Edge, colour = Edge)) +
geom_line(show.legend = FALSE) +  coord_trans(x="log10") + theme_bw()
model_pen <- getModel(network_models, network_models$penalties[20]) # give some sparsity
model_BIC <- getBestModel(network_models, "BIC")   # if no criteria is specified, the best BIC is used
library(future)
plan(multisession, workers = 2)
model_StARS <- getBestModel(network_models, "StARS")
plot(network_models, "stability")
plot(network_models, "stability")
plot(network_models, "stability")
future::plan("sequential")
model_StARS
my_graph <- plot(model_StARS, plot = FALSE)
my_graph
my_graph
plot(model_StARS)
plot(model_StARS)
library(googlesheets4)
?read_sheet
abundance<-read_sheet("https://docs.google.com/spreadsheets/d/120PG7RZufx3aKSijSOKWAMKIstlERbL9ryG98aCj4RM/edit?usp=sharing", sheet = "Top_12_+_Positive_Controls", col_names = TRUE)
abundance<-read_sheet("https://docs.google.com/spreadsheets/d/120PG7RZufx3aKSijSOKWAMKIstlERbL9ryG98aCj4RM/edit?usp=sharing", sheet = "Top_12_+_Positive_Controls", col_names = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(PLNmodels)
library(ggplot2)
library(tidyverse)
library(googlesheets4)
abundance<-read_sheet("https://docs.google.com/spreadsheets/d/120PG7RZufx3aKSijSOKWAMKIstlERbL9ryG98aCj4RM/edit?usp=sharing", sheet = "Top_12_+_Positive_Controls", col_names = TRUE)
View(abundance)
metadata <- read_csv("metadata_test.csv")
joined_data <- inner_join(reads_test, metadata_test)
metadata_ordered <- joined_data %>%
select(id,biome:shannon_entropy)
abundance_ordered <- joined_data %>%
select(-id) %>%
select(!biome:shannon_entropy)
microbiome <- prepare_data(reads_test_ordered,metadata_test_ordered, offset = "GMPR")
str(microbiome)
View(microbiome)
#Check to make sure this doesn't include id in abundance matrix.
microbiome <- prepare_data(abundance_ordered, metadata_ordered, offset = "GMPR")
str(microbiome)
View(microbiome)
View(abundance_ordered)
joined_data <- inner_join(abundance, metadata)
abundance<-read_sheet("https://docs.google.com/spreadsheets/d/120PG7RZufx3aKSijSOKWAMKIstlERbL9ryG98aCj4RM/edit?usp=sharing", sheet = "Top_12_+_Positive_Controls", col_names = TRUE) %>%
rename(id = index)
metadata <- read_csv("metadata_test.csv")
joined_data <- inner_join(abundance, metadata, by = id)
joined_data <- inner_join(abundance, metadata, by = "id")
abundance_ordered <- joined_data %>%
select(-id) %>%
select(-rp.x) %>%
select(!biome:shannon_entropy)
abundance_ordered <- joined_data %>%
select(-id) %>%
select(!rp.x) %>%
select(!biome:shannon_entropy)
joined_data <- inner_join(abundance, metadata, by = "id")
View(joined_data)
metadata_ordered <- joined_data %>%
select(id,biome:shannon_entropy)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(PLNmodels)
library(ggplot2)
library(tidyverse)
library(googlesheets4)
abundance<-read_sheet("https://docs.google.com/spreadsheets/d/120PG7RZufx3aKSijSOKWAMKIstlERbL9ryG98aCj4RM/edit?usp=sharing", sheet = "Top_12_+_Positive_Controls", col_names = TRUE) %>%
rename(id = index)
View(abundance)
View(abundance)
abundance<-read_sheet("https://docs.google.com/spreadsheets/d/120PG7RZufx3aKSijSOKWAMKIstlERbL9ryG98aCj4RM/edit?usp=sharing", sheet = "Top_12_+_Positive_Controls", col_names = TRUE) %>%
rename(id = index) %>%
select(-rp)
metadata <- read_csv("metadata_test.csv")
View(metadata)
View(metadata)
joined_data <- inner_join(abundance, metadata, by = "id")
View(joined_data)
View(joined_data)
metadata_ordered <- joined_data %>%
select(id,biome:shannon_entropy)
View(metadata_ordered)
View(metadata_ordered)
abundance_ordered <- joined_data %>%
select(-id) %>%
select(!biome:shannon_entropy)
View(abundance_ordered)
microbiome <- prepare_data(abundance_ordered, metadata_ordered, offset = "GMPR")
str(microbiome)
View(microbiome)
plot.new()
corrplot::corrplot(
t(log(1 + abundance_ordered)),
is.corr = FALSE,
addgrid.col = NA
)
corrplot::corrplot(
t(log(1 + abundance_ordered)),
is.corr = FALSE,
addgrid.col = NA
)
?corrplot
corrplot::corrplot(
t(log(1 + abundance_ordered)),
is.corr = FALSE,
addgrid.col = NA,
tl.cex = 0.01
)
corrplot::corrplot(
t(log(1 + abundance_ordered)),
is.corr = FALSE,
addgrid.col = NA,
tl.cex = 0.01
)
corrplot::corrplot(
t(log(1 + abundance_ordered)),
is.corr = FALSE,
addgrid.col = NA,
tl.cex = 0.1
)
corrplot::corrplot(
t(log(1 + abundance_ordered)),
is.corr = FALSE,
addgrid.col = NA,
tl.cex = 0.3
)
corrplot::corrplot(
t(log(1 + abundance_ordered)),
is.corr = FALSE,
addgrid.col = NA,
tl.cex = 0.3
)
corrplot::corrplot(
t(log(1 + abundance_ordered)),
is.corr = FALSE,
addgrid.col = NA,
tl.cex = 0.6
)
corrplot::corrplot(
t(log(1 + abundance_ordered)),
is.corr = FALSE,
addgrid.col = NA,
tl.cex = 0.6,
mar=c(1,1,1,1)
)
corrplot::corrplot(
t(log(1 + abundance_ordered)),
is.corr = FALSE,
addgrid.col = NA,
tl.cex = 0.6,
mar=c(0,0,0,0)
)
corrplot::corrplot(
t(log(1 + abundance_ordered)),
is.corr = FALSE,
addgrid.col = NA,
tl.cex = 0.6,
mai=c(0,0,0,0)
)
corrplot::corrplot(
t(log(1 + abundance_ordered)),
is.corr = FALSE,
addgrid.col = NA,
tl.cex = 0.5,
)
network_models <- PLNnetwork(Abundance ~ 1 + offset(log(Offset)), data = microbiome)
network_models
network_models$criteria %>% head() %>% knitr::kable()
network_models$convergence %>% head() %>% knitr::kable()
plot(network_models, "diagnostic")
plot(network_models)
plot(network_models)
plot(network_models)
coefficient_path(network_models, corr = TRUE) %>%
ggplot(aes(x = Penalty, y = Coeff, group = Edge, colour = Edge)) +
geom_line(show.legend = FALSE) +  coord_trans(x="log10") + theme_bw()
model_pen <- getModel(network_models, network_models$penalties[20]) # give some sparsity
model_BIC <- getBestModel(network_models, "BIC")   # if no criteria is specified, the best BIC is used
network_models <- PLNnetwork(Abundance ~ 1 + offset(log(Offset)), data = microbiome)
etwork_models
network_models
network_models$criteria %>% head() %>% knitr::kable()
network_models$convergence %>% head() %>% knitr::kable()
plot(network_models, "diagnostic")
plot(network_models, "diagnostic")
plot(network_models)
library(future)
plan(multisession, workers = 2)
n <- nrow(trichoptera)
subs <- replicate(10, sample.int(n, size = n/2), simplify = FALSE)
model_pen <- getModel(network_models, network_models$penalties[20]) # give some sparsity
model_BIC <- getBestModel(network_models, "BIC")   # if no criteria is specified, the best BIC is used
library(future)
plan(multisession, workers = 2)
n <- nrow(trichoptera)
subs <- replicate(10, sample.int(n, size = n/2), simplify = FALSE)
View(microbiome)
network_models
network_models$criteria %>% head() %>% knitr::kable()
network_models$convergence %>% head() %>% knitr::kable()
plot(network_models, "diagnostic")
plot(network_models)
plot(network_models)
model_pen <- getModel(network_models, network_models$penalties[20]) # give some sparsity
model_BIC <- getBestModel(network_models, "BIC")   # if no criteria is specified, the best BIC is used
library(future)
plan(multisession, workers = 2)
model_StARS <- getBestModel(network_models, "StARS")
plot(network_models, "stability")
future::plan("sequential")
model_StARS
my_graph <- plot(model_StARS, plot = FALSE)
my_graph
plot(model_StARS)
